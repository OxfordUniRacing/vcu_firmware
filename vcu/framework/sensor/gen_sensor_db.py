#!/usr/bin/env python3

import csv

num = 0
macros = []
names = {}
types = {}
trans = {}

with open('sensor_db.csv', 'r') as file:
    reader = csv.reader(file)
    next(reader)
    for row in reader:
        i = int(row[0])
        name = row[1]
        count = int(row[2])
        typ = row[3]
        tran = row[4]

        if count > 1: macros.append((i, name, count))

        for j in range(i, i+count):
            if count > 1: names[j] = "{}_{}".format(name, j-i+1)
            else: names[j] = name
            if typ == "float": types[j] = "SENSOR_TYPE_FLOAT"
            elif typ == "bool": types[j] = "SENSOR_TYPE_BOOL"
            else: raise Exception('invalid type in ' + str(i))
            trans[j] = tran
            num = max(num, j+1)


with open('sensor_db.h', 'w') as file:
    file.write(
"""/* AUTOGENERATED DO NOT EDIT */

#ifndef FRAMEWORK_SENSOR_SENSOR_DB_H
#define FRAMEWORK_SENSOR_SENSOR_DB_H

#include "utils_assert.h"

""")

    file.write("#define SENSOR_MAX_NUM {}\n\n".format(num))

    for i, name in names.items():
        file.write("#define SENS_{} {}\n".format(name.upper(), i))
    file.write("\n")
    for i, name, count in macros:
        file.write("#define SENS_{}(i) (".format(name.upper()))
        file.write("ASSERT(i>0&&i<={}), ".format(count))
        file.write("{}+i)\n".format(i-1))

    file.write("\n#endif\n")


with open('sensor_db.c', 'w') as file:
    file.write(
"""/* AUTOGENERATED DO NOT EDIT */

#include "sensor.h"
#include "sensor_db.h"

""")

    file.write("char *sensor_names[] = {\n")
    for i in range(0, num):
        if i in names: file.write('\t"{}",\n'.format(names[i]))
        else: file.write("\tNULL,\n")
    file.write("};\n\n")

    file.write("sensor_trans_fn sensor_trans_fns[] = {\n")
    for i in range(0, num):
        if i in trans: file.write('\t{},\n'.format(trans[i]))
        else: file.write("\tNULL,\n")
    file.write("};\n")


with open('param_db_calib.h', 'w') as hdr, open('param_db_calib.c.h', 'w') as src:
    d = {}
    count = 0
    for i, t in trans.items():
        if t == "sensor_trans_linear":
            offset = 2048 + i*8
            d[offset] = "calib_" + names[i] + "_m"
            d[offset+4] = "calib_" + names[i] + "_c"
            count += 2

    for ofst, name in d.items():
        hdr.write("#define PARAM_{} {}\n".format(name.upper(), ofst))
    hdr.write("\n")

    hdr.write("#define PARAM_INFO_CALIB_COUNT {}\n\n".format(count))

    src.write("#define PARAM_INFO_CALIB \\\n")
    for ofst, name in d.items():
        src.write('\t{{"{}", {}}}, \\\n'.format(name, ofst))
    src.write("\n")
